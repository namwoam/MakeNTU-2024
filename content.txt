The pursuit of general purpose AI systems has lead to the development of capable end-to-end trainable models [1,5,8,13,19,25,27], many Of which aspire to provide simple natural language interface for a user to interact with the model。 The predominant approach to building these systems has been massive-scale unsupervised pretraining followed by supervised multitask training: However; this approach requires a well curated dataset for each task that makes i challenging to scale to the infinitely long tail Of complex tasks We would eventually like these systems to perform. I this work, we explore the use oflarge language models to tackle the long tail of complex tasks by decom- posing these tasks described i natural language into sim- pler steps that may be handled by specialized end-to-end trained models or other programs。 Imagine instructing 8 Vision system tO Tag the 7 main characters on the TV show Big Bang Theory in this image. To perform this task。 the system first needs to understand the intent Of the instruction and then perform sequence Of steps detect the faces, retrieve list Of main characters OI Big Bang Theory from knowledge base, classify faces using the list Of characters, and tag the image with recog- nized character s faces and names。 While different Vision and language systems exist to perform each of these steps, executing this task described in natural language is beyond the scope Of end-to-end trained systems。 We introduce VISPROG Which inputs visual data (a sin- gle image Or a set of images) along with a natural language instruction, generates sequence Of steps, visual pro- gram 让 you will, and then executes these steps tO produce the desired output。 Each line 证 a Visual Program invokes OnC among a Wide range Of modules currently supported by the system。 Modules may be Off-the-shelf computer vi- sion models, language models, image processing subrou- tines i OpenCV [4],or arithmetic and logical operators Modules consume inputs that are produced by executing Previous lines of code and output intermediate results that Can be consumed downstream. In the example above, the visual program generated by VISPROG invokes a face de- tector 18],GPT-3 [5] as a knowledge retrieval system, and CLIP [23] as an open-vocabulary image classifier to Pro- duce the desired output (see Fig. 1. VISPROG improves upon previous methods for gener ating and executing programs for vision applications。 For the Visual question answering (VQA) task; Neural Module Networks (NMN) [2,9,10,12] compose question-specific, Cnd-to-end trainable network from specialized; differen- tiable Ieural modules。 These approaches either use brittle, Off-the-shelf semantic parsers to deterministically compute the layout Of modules, or leam layout generator through Weak anSWeI supervision via REINFORCE [33] In COI- trast, VISPROG uses powerful language model (GPT-3)
Colorpop PIL ,convert() CVZ SrabCut()
PIL .GaU5sianllur( ) Cv2 BrabCut()
Figure 2_ Modules currently supported i VISPROG。 Red modules use neural models (OWL-Vir [21], DSFD 18], Mask- Former [6], CLIP [23], ViLT [16], and Stable Diffusion [28]). Blue modules use image processing and other Python subroutines。 These modules are ivoked i programs generated from natural language instructions. Adding new modules to extend VISPROG's capabilities is straightforward (Code.1). and a Small number Of in-context examples to create Com- plex programs without requiring any training' Programs created by VISPROG also use higher-level of abstraction than NMNs and ivoke trained state-of-the-art models and nonl-neural python subroutines (Fig: 2). These advantages make VISPROG 31 easy-to-Use, Performant, and modular neuro-symbolic system。 VISPROG is also highly interpretable。 First。 VISPROG produces easy-to-understand programs Which USEI Can verify for logical correctness_ Second, by breaking down the prediction into simple steps, VISPROG allows 3 USCI t0 inspect the outputs Of intermediate steps to diagnose errors and 让 required, intervene in the reasoning process。 Alto- gether, an executed program with intermediate step results (e.8. text, bounding boxes, segmentation masks, generated images, etc .) linked together to depict the flow ofinforma- tion serves as a visual rationale for the prediction_ To demonstrate ils flexibility, we use VISPROG for 4 dif- ferent tasks that share some common skills (e.8一 for j- age parsing) While also requiring some degree Of special- ized reasoning and visual manipulation capabilities。 These tasks are (i) compositional visual question answering; (i) zero-shot natural language visual reasoning (NLVR) on im- age pairs; (试) factual knowledge object tagging from natu- ral language instructions; and (iv) language-guided image editing: We emphasize that neither the language model nor any Of the modules are finetuned 讥 any way。 Adapt ing VISPROG to any task is as simple as providing a few in-context examples consisting Ofnatural language instruc- tions and the corresponding programs_ While easy tO use VISPROG shows an impressive gain Of 2 points OVCI base VQA model on the compositional VQA task, strong zero-shot accuracy of 62.4% on NLVR without ever train- ig OI image pairs, and delightful qualitative and quantita- tive results on knowledge tagging and image editing tasks。 1We use 'training' to refer to gradient-based learning to differentiate it from in-context learning which only involves a feedforward pass_